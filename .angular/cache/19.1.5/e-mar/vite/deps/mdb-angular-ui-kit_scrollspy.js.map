{
  "version": 3,
  "sources": ["../../../../../../node_modules/mdb-angular-ui-kit/fesm2022/mdb-angular-ui-kit-scrollspy.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, PLATFORM_ID, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nconst _c0 = [\"mdbScrollspy\", \"\"];\nconst _c1 = [\"*\"];\nclass MdbScrollspyLinkDirective {\n  cdRef;\n  document;\n  get scrollIntoView() {\n    return this._scrollIntoView;\n  }\n  set scrollIntoView(value) {\n    this._scrollIntoView = value;\n  }\n  _scrollIntoView = true;\n  get section() {\n    return this._section;\n  }\n  set section(value) {\n    if (value) {\n      this._section = value;\n    }\n  }\n  _section;\n  _id;\n  constructor(cdRef, document) {\n    this.cdRef = cdRef;\n    this.document = document;\n  }\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  scrollspyLink = true;\n  active = false;\n  onClick() {\n    if (this.section && this.scrollIntoView === true) {\n      this.section.scrollIntoView();\n    }\n  }\n  detectChanges() {\n    this.cdRef.detectChanges();\n  }\n  assignSectionToId() {\n    this.section = this.document.documentElement.querySelector(`#${this.id}`);\n  }\n  ngOnInit() {\n    this.assignSectionToId();\n  }\n  static ɵfac = function MdbScrollspyLinkDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MdbScrollspyLinkDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyLinkDirective,\n    selectors: [[\"\", \"mdbScrollspyLink\", \"\"]],\n    hostVars: 4,\n    hostBindings: function MdbScrollspyLinkDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MdbScrollspyLinkDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"scrollspy-link\", ctx.scrollspyLink)(\"active\", ctx.active);\n      }\n    },\n    inputs: {\n      scrollIntoView: \"scrollIntoView\",\n      id: [0, \"mdbScrollspyLink\", \"id\"]\n    },\n    standalone: false\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyLinkDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyLink]'\n    }]\n  }], () => [{\n    type: i0.ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }], {\n    scrollIntoView: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspyLink']\n    }],\n    scrollspyLink: [{\n      type: HostBinding,\n      args: ['class.scrollspy-link']\n    }],\n    active: [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', []]\n    }]\n  });\n})();\nclass MdbScrollspyService {\n  scrollSpys = [];\n  activeSubject = new Subject();\n  active$ = this.activeSubject;\n  addScrollspy(scrollSpy) {\n    this.scrollSpys.push(scrollSpy);\n  }\n  removeScrollspy(scrollSpyId) {\n    const scrollSpyIndex = this.scrollSpys.findIndex(spy => {\n      return spy.id === scrollSpyId;\n    });\n    this.scrollSpys.splice(scrollSpyIndex, 1);\n  }\n  updateActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    this.setActiveLink(activeLink);\n  }\n  removeActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    if (!activeLink) {\n      return;\n    }\n    activeLink.active = false;\n    activeLink.detectChanges();\n  }\n  setActiveLink(activeLink) {\n    if (activeLink) {\n      activeLink.active = true;\n      activeLink.detectChanges();\n      this.activeSubject.next(activeLink);\n    }\n  }\n  removeActiveLinks(scrollSpyId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    scrollSpy.links.forEach(link => {\n      link.active = false;\n      link.detectChanges();\n    });\n  }\n  static ɵfac = function MdbScrollspyService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MdbScrollspyService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MdbScrollspyService,\n    factory: MdbScrollspyService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n  scrollSpyService;\n  _elementRef;\n  _renderer;\n  links;\n  _destroy$ = new Subject();\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  _id;\n  get collapsible() {\n    return this._collapsible;\n  }\n  set collapsible(value) {\n    this._collapsible = coerceBooleanProperty(value);\n  }\n  _collapsible = false;\n  _isBrowser;\n  activeLinkChange = new EventEmitter();\n  activeSub;\n  constructor(scrollSpyService, _elementRef, _renderer, platformId) {\n    this.scrollSpyService = scrollSpyService;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._isBrowser = isPlatformBrowser(platformId);\n  }\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  collapsibleElementHeight = 0;\n  ngOnInit() {\n    if (this._isBrowser) {\n      this.collapsibleElementHeight = this.host.getBoundingClientRect().height;\n    }\n    this.activeSub = this.scrollSpyService.active$.pipe(takeUntil(this._destroy$), distinctUntilChanged()).subscribe(activeLink => {\n      this.activeLinkChange.emit(activeLink);\n      if (this.collapsible) {\n        this.styleCollapsibleElement();\n      }\n    });\n  }\n  ngAfterContentInit() {\n    this.scrollSpyService.addScrollspy({\n      id: this.id,\n      links: this.links\n    });\n  }\n  ngOnDestroy() {\n    this.scrollSpyService.removeScrollspy(this.id);\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n  styleCollapsibleElement() {\n    this._renderer.setStyle(this.host, 'overflow', 'hidden');\n    this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');\n    this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');\n    const hostSiblings = this.getAllSiblings(this.host);\n    const isAnySiblingActive = hostSiblings.some(element => {\n      return element.classList.contains('active');\n    });\n    if (this.collapsible && isAnySiblingActive) {\n      this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);\n    } else if (this.collapsible && !isAnySiblingActive) {\n      this._renderer.setStyle(this.host, 'height', '0px');\n    }\n  }\n  getAllSiblings(element) {\n    let siblings = [];\n    if (!element.parentNode) {\n      return siblings;\n    }\n    let sibling = element.parentNode.firstElementChild;\n    do {\n      if (sibling != element) {\n        siblings.push(sibling);\n      }\n    } while (sibling = sibling.nextElementSibling);\n    return siblings;\n  }\n  static ɵfac = function MdbScrollspyDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MdbScrollspyDirective)(i0.ɵɵdirectiveInject(MdbScrollspyService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MdbScrollspyDirective,\n    selectors: [[\"\", \"mdbScrollspy\", \"\"]],\n    contentQueries: function MdbScrollspyDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MdbScrollspyLinkDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n      }\n    },\n    inputs: {\n      id: [0, \"mdbScrollspy\", \"id\"],\n      collapsible: \"collapsible\"\n    },\n    outputs: {\n      activeLinkChange: \"activeLinkChange\"\n    },\n    standalone: false,\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MdbScrollspyDirective_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyDirective, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: '[mdbScrollspy]',\n      template: '<ng-content></ng-content>'\n    }]\n  }], () => [{\n    type: MdbScrollspyService\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }], {\n    links: [{\n      type: ContentChildren,\n      args: [MdbScrollspyLinkDirective, {\n        descendants: true\n      }]\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspy']\n    }],\n    collapsible: [{\n      type: Input\n    }],\n    activeLinkChange: [{\n      type: Output\n    }]\n  });\n})();\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n  _elementRef;\n  renderer;\n  ngZone;\n  scrollSpyService;\n  _document;\n  id;\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  container;\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  _scrollSpyId;\n  offset = 0;\n  constructor(_elementRef, renderer, ngZone, scrollSpyService, _document) {\n    this._elementRef = _elementRef;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n    this._document = _document;\n  }\n  isElementInViewport() {\n    const scrollTop = this.container.scrollTop;\n    const elTop = this.host.offsetTop - this.offset;\n    const elHeight = this.host.offsetHeight;\n    return scrollTop >= elTop && scrollTop < elTop + elHeight;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.removeActiveLinks(scrollSpyId);\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(this.container, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.host.id;\n    if (!this.container) {\n      this.container = this._getClosestEl(this.host, '.scrollspy-container');\n    }\n    this.renderer.setStyle(this.container, 'position', 'relative');\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n  _getClosestEl(el, selector) {\n    for (; el && el !== this._document; el = el.parentNode) {\n      if (el.matches && el.matches(selector)) {\n        return el;\n      }\n    }\n    return null;\n  }\n  static ɵfac = function MdbScrollspyElementDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MdbScrollspyElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyElementDirective,\n    selectors: [[\"\", \"mdbScrollspyElement\", \"\"]],\n    inputs: {\n      container: \"container\",\n      scrollSpyId: [0, \"mdbScrollspyElement\", \"scrollSpyId\"],\n      offset: \"offset\"\n    },\n    standalone: false\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyElementDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyElement]'\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: i0.NgZone\n  }, {\n    type: MdbScrollspyService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }], {\n    container: [{\n      type: Input\n    }],\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyElement']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyWindowDirective {\n  document;\n  el;\n  renderer;\n  ngZone;\n  scrollSpyService;\n  id;\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  _scrollSpyId;\n  offset = 0;\n  constructor(document, el, renderer, ngZone, scrollSpyService) {\n    this.document = document;\n    this.el = el;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n  }\n  isElementInViewport() {\n    const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n    const elHeight = this.el.nativeElement.offsetHeight;\n    const elTop = this.el.nativeElement.offsetTop - this.offset;\n    const elBottom = elTop + elHeight;\n    return scrollTop >= elTop && scrollTop <= elBottom;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    } else {\n      this.scrollSpyService.removeActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(window, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.el.nativeElement.id;\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n  static ɵfac = function MdbScrollspyWindowDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MdbScrollspyWindowDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyWindowDirective,\n    selectors: [[\"\", \"mdbScrollspyWindow\", \"\"]],\n    inputs: {\n      scrollSpyId: [0, \"mdbScrollspyWindow\", \"scrollSpyId\"],\n      offset: \"offset\"\n    },\n    standalone: false\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyWindowDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyWindow]'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: i0.NgZone\n  }, {\n    type: MdbScrollspyService\n  }], {\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyWindow']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyModule {\n  static ɵfac = function MdbScrollspyModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MdbScrollspyModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MdbScrollspyModule,\n    declarations: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n    exports: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MdbScrollspyService]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      exports: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      providers: [MdbScrollspyService]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n"],
  "mappings": "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",
  "names": []
}
