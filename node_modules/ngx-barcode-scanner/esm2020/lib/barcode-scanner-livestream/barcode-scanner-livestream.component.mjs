import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import Quagga from '@ericblade/quagga2';
import defaultsDeep from 'lodash.defaultsdeep';
import { Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { DEFAULT_CONFIG } from './barcode-scanner-livestream.config';
import { mapToReader } from './barcode-types';
import * as i0 from "@angular/core";
export class BarcodeScannerLivestreamComponent {
    constructor() {
        this.maxWidth = '100%';
        this._valueChanges = new Subject();
        // Outputs
        this.valueChanges = new EventEmitter();
        this.started = new EventEmitter();
        this._started = false;
        this._destroyed = new Subject();
        this._valueChanges.pipe(takeUntil(this._destroyed), filter((result) => {
            const errors = result.codeResult.decodedCodes
                .filter(_ => _.error !== undefined)
                .map(_ => _.error);
            const median = this._getMedian(errors);
            //Filter result when median and/or threshold parameters are provided
            //Good result for code_128 : median = 0.08 and threshold = 0.1
            return !this.errorFilter ||
                !(this.errorFilter.median && median > this.errorFilter.median
                    || this.errorFilter.threshold && errors.some(err => err > this.errorFilter.threshold));
        })).subscribe(result => {
            const drawingCtx = Quagga.canvas.ctx.overlay;
            Quagga.ImageDebug.drawPath(result.line, {
                x: 'x',
                y: 'y',
            }, drawingCtx, {
                color: 'red',
                lineWidth: 3,
            });
            this.valueChanges.next(result);
        });
    }
    set torch(value) {
        const track = Quagga.CameraAccess.getActiveTrack();
        if (track) {
            track.applyConstraints({
                advanced: [{ torch: value }],
            });
        }
    }
    get _maxWidth() {
        return this.maxWidth ? `${this.maxWidth}` : 'auto';
    }
    get _maxHeight() {
        return this.maxHeight ? `${this.maxHeight}` : 'auto';
    }
    get isStarted() {
        return this._started;
    }
    ngOnDestroy() {
        this.stop();
        this._destroyed.next(true);
        this._destroyed.complete();
    }
    ngOnChanges() {
        this.restart();
    }
    _init() {
        return new Promise((resolve, reject) => {
            Quagga.onProcessed((result) => this.onProcessed(result));
            Quagga.onDetected((result) => this.onDetected(result));
            this.configQuagga = defaultsDeep({}, this.config, DEFAULT_CONFIG);
            this.configQuagga.inputStream.target = this.barcodeScanner.nativeElement;
            if (this.type) {
                this.configQuagga.decoder.readers = mapToReader(this.type);
            }
            if (this.deviceId) {
                this.configQuagga.inputStream.constraints.deviceId = this.deviceId;
            }
            Quagga.init(this.configQuagga, (err) => {
                if (err) {
                    console.log(err);
                    return reject(err);
                }
                resolve();
            });
        });
    }
    _getMedian(arr) {
        arr.sort((a, b) => a - b);
        const half = Math.floor(arr.length / 2);
        if (arr.length % 2 === 1) // Odd length
            return arr[half];
        return (arr[half - 1] + arr[half]) / 2.0;
    }
    async start() {
        if (!this._started) {
            await this._init();
            Quagga.start();
            this._started = true;
            this.started.next(true);
        }
    }
    stop() {
        if (this._started) {
            Quagga.stop();
            this._started = false;
            this.started.next(false);
        }
    }
    restart() {
        if (this._started) {
            this.stop();
            this.start();
        }
    }
    onProcessed(result) {
        const drawingCtx = Quagga.canvas.ctx.overlay;
        const drawingCanvas = Quagga.canvas.dom.overlay;
        if (result) {
            if (result.boxes) {
                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width'), 10), parseInt(drawingCanvas.getAttribute('height'), 10));
                result.boxes.filter((box) => {
                    return box !== result.box;
                }).forEach((box) => {
                    Quagga.ImageDebug.drawPath(box, {
                        x: 0,
                        y: 1,
                    }, drawingCtx, {
                        color: 'green',
                        lineWidth: 2,
                    });
                });
            }
            if (result.box) {
                Quagga.ImageDebug.drawPath(result.box, {
                    x: 0,
                    y: 1,
                }, drawingCtx, {
                    color: '#00F',
                    lineWidth: 2,
                });
            }
        }
    }
    onDetected(result) {
        this._valueChanges.next(result);
    }
}
BarcodeScannerLivestreamComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BarcodeScannerLivestreamComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.11", type: BarcodeScannerLivestreamComponent, selector: "barcode-scanner-livestream", inputs: { type: "type", deviceId: "deviceId", maxWidth: "maxWidth", maxHeight: "maxHeight", config: "config", errorFilter: "errorFilter", torch: "torch" }, outputs: { valueChanges: "valueChanges", started: "started" }, viewQueries: [{ propertyName: "barcodeScanner", first: true, predicate: ["BarcodeScanner"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  #BarcodeScanner\n  class=\"scanner\"\n  [hidden]=\"!isStarted\"\n  [style.max-height]=\"_maxHeight\"\n  [style.max-width]=\"_maxWidth\"\n>\n  <video [style.max-height]=\"_maxHeight\" [style.max-width]=\"_maxWidth\"></video>\n  <canvas\n    [style.max-height]=\"_maxHeight\"\n    [style.max-width]=\"_maxWidth\"\n    class=\"drawingBuffer\"\n  ></canvas>\n</div>\n", styles: [".scanner{position:relative}.scanner video,.scanner canvas{width:100%;height:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}\n"], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamComponent, decorators: [{
            type: Component,
            args: [{ selector: 'barcode-scanner-livestream', encapsulation: ViewEncapsulation.None, template: "<div\n  #BarcodeScanner\n  class=\"scanner\"\n  [hidden]=\"!isStarted\"\n  [style.max-height]=\"_maxHeight\"\n  [style.max-width]=\"_maxWidth\"\n>\n  <video [style.max-height]=\"_maxHeight\" [style.max-width]=\"_maxWidth\"></video>\n  <canvas\n    [style.max-height]=\"_maxHeight\"\n    [style.max-width]=\"_maxWidth\"\n    class=\"drawingBuffer\"\n  ></canvas>\n</div>\n", styles: [".scanner{position:relative}.scanner video,.scanner canvas{width:100%;height:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { type: [{
                type: Input
            }], deviceId: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], config: [{
                type: Input
            }], errorFilter: [{
                type: Input
            }], torch: [{
                type: Input
            }], valueChanges: [{
                type: Output
            }], started: [{
                type: Output
            }], barcodeScanner: [{
                type: ViewChild,
                args: ['BarcodeScanner']
            }] } });
//# sourceMappingURL=data:application/json;base64,