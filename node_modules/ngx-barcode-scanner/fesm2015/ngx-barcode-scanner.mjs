import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, NgModule } from '@angular/core';
import { __awaiter } from 'tslib';
import Quagga from '@ericblade/quagga2';
import defaultsDeep from 'lodash.defaultsdeep';
import { Subject } from 'rxjs';
import { takeUntil, filter } from 'rxjs/operators';

const DEFAULT_CONFIG = {
    inputStream: {
        name: 'Live',
        type: 'LiveStream',
        target: null,
        constraints: {
            width: { min: 640 },
            height: { min: 480 },
            aspectRatio: { min: 1, max: 2 },
            facingMode: 'environment', // or user
        },
        singleChannel: false // true: only the red color-channel is read
    },
    locator: {
        patchSize: 'medium',
        halfSample: true
    },
    locate: true,
    numOfWorkers: 4,
    decoder: {
        readers: ['code_128_reader']
    }
};

const BARCODE_TYPES = [
    'code_128',
    'code_39',
    'code_39_vin',
    'ean',
    'ean_extended',
    'ean_8',
    'upc',
    'upc_e',
    'codabar',
    'i2of5',
    '2of5',
    'code_93'
];
function mapToReader(value) {
    if (typeof value === 'string') {
        checkBarCodeType(value);
        return [mapToBarcodeType(value)];
    }
    else {
        return value.map(val => {
            checkBarCodeType(val);
            return mapToBarcodeType(val);
        });
    }
}
function checkBarCodeType(value) {
    if (!BARCODE_TYPES.some(t => t === value)) {
        throw new Error(`This barcode type '${value}' is not valid.`);
    }
}
function mapToBarcodeType(value) {
    return `${value}_reader`;
}

class BarcodeScannerLivestreamComponent {
    constructor() {
        this.maxWidth = '100%';
        this._valueChanges = new Subject();
        // Outputs
        this.valueChanges = new EventEmitter();
        this.started = new EventEmitter();
        this._started = false;
        this._destroyed = new Subject();
        this._valueChanges.pipe(takeUntil(this._destroyed), filter((result) => {
            const errors = result.codeResult.decodedCodes
                .filter(_ => _.error !== undefined)
                .map(_ => _.error);
            const median = this._getMedian(errors);
            //Filter result when median and/or threshold parameters are provided
            //Good result for code_128 : median = 0.08 and threshold = 0.1
            return !this.errorFilter ||
                !(this.errorFilter.median && median > this.errorFilter.median
                    || this.errorFilter.threshold && errors.some(err => err > this.errorFilter.threshold));
        })).subscribe(result => {
            const drawingCtx = Quagga.canvas.ctx.overlay;
            Quagga.ImageDebug.drawPath(result.line, {
                x: 'x',
                y: 'y',
            }, drawingCtx, {
                color: 'red',
                lineWidth: 3,
            });
            this.valueChanges.next(result);
        });
    }
    set torch(value) {
        const track = Quagga.CameraAccess.getActiveTrack();
        if (track) {
            track.applyConstraints({
                advanced: [{ torch: value }],
            });
        }
    }
    get _maxWidth() {
        return this.maxWidth ? `${this.maxWidth}` : 'auto';
    }
    get _maxHeight() {
        return this.maxHeight ? `${this.maxHeight}` : 'auto';
    }
    get isStarted() {
        return this._started;
    }
    ngOnDestroy() {
        this.stop();
        this._destroyed.next(true);
        this._destroyed.complete();
    }
    ngOnChanges() {
        this.restart();
    }
    _init() {
        return new Promise((resolve, reject) => {
            Quagga.onProcessed((result) => this.onProcessed(result));
            Quagga.onDetected((result) => this.onDetected(result));
            this.configQuagga = defaultsDeep({}, this.config, DEFAULT_CONFIG);
            this.configQuagga.inputStream.target = this.barcodeScanner.nativeElement;
            if (this.type) {
                this.configQuagga.decoder.readers = mapToReader(this.type);
            }
            if (this.deviceId) {
                this.configQuagga.inputStream.constraints.deviceId = this.deviceId;
            }
            Quagga.init(this.configQuagga, (err) => {
                if (err) {
                    console.log(err);
                    return reject(err);
                }
                resolve();
            });
        });
    }
    _getMedian(arr) {
        arr.sort((a, b) => a - b);
        const half = Math.floor(arr.length / 2);
        if (arr.length % 2 === 1) // Odd length
            return arr[half];
        return (arr[half - 1] + arr[half]) / 2.0;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._started) {
                yield this._init();
                Quagga.start();
                this._started = true;
                this.started.next(true);
            }
        });
    }
    stop() {
        if (this._started) {
            Quagga.stop();
            this._started = false;
            this.started.next(false);
        }
    }
    restart() {
        if (this._started) {
            this.stop();
            this.start();
        }
    }
    onProcessed(result) {
        const drawingCtx = Quagga.canvas.ctx.overlay;
        const drawingCanvas = Quagga.canvas.dom.overlay;
        if (result) {
            if (result.boxes) {
                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width'), 10), parseInt(drawingCanvas.getAttribute('height'), 10));
                result.boxes.filter((box) => {
                    return box !== result.box;
                }).forEach((box) => {
                    Quagga.ImageDebug.drawPath(box, {
                        x: 0,
                        y: 1,
                    }, drawingCtx, {
                        color: 'green',
                        lineWidth: 2,
                    });
                });
            }
            if (result.box) {
                Quagga.ImageDebug.drawPath(result.box, {
                    x: 0,
                    y: 1,
                }, drawingCtx, {
                    color: '#00F',
                    lineWidth: 2,
                });
            }
        }
    }
    onDetected(result) {
        this._valueChanges.next(result);
    }
}
BarcodeScannerLivestreamComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BarcodeScannerLivestreamComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.11", type: BarcodeScannerLivestreamComponent, selector: "barcode-scanner-livestream", inputs: { type: "type", deviceId: "deviceId", maxWidth: "maxWidth", maxHeight: "maxHeight", config: "config", errorFilter: "errorFilter", torch: "torch" }, outputs: { valueChanges: "valueChanges", started: "started" }, viewQueries: [{ propertyName: "barcodeScanner", first: true, predicate: ["BarcodeScanner"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  #BarcodeScanner\n  class=\"scanner\"\n  [hidden]=\"!isStarted\"\n  [style.max-height]=\"_maxHeight\"\n  [style.max-width]=\"_maxWidth\"\n>\n  <video [style.max-height]=\"_maxHeight\" [style.max-width]=\"_maxWidth\"></video>\n  <canvas\n    [style.max-height]=\"_maxHeight\"\n    [style.max-width]=\"_maxWidth\"\n    class=\"drawingBuffer\"\n  ></canvas>\n</div>\n", styles: [".scanner{position:relative}.scanner video,.scanner canvas{width:100%;height:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}\n"], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamComponent, decorators: [{
            type: Component,
            args: [{ selector: 'barcode-scanner-livestream', encapsulation: ViewEncapsulation.None, template: "<div\n  #BarcodeScanner\n  class=\"scanner\"\n  [hidden]=\"!isStarted\"\n  [style.max-height]=\"_maxHeight\"\n  [style.max-width]=\"_maxWidth\"\n>\n  <video [style.max-height]=\"_maxHeight\" [style.max-width]=\"_maxWidth\"></video>\n  <canvas\n    [style.max-height]=\"_maxHeight\"\n    [style.max-width]=\"_maxWidth\"\n    class=\"drawingBuffer\"\n  ></canvas>\n</div>\n", styles: [".scanner{position:relative}.scanner video,.scanner canvas{width:100%;height:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { type: [{
                type: Input
            }], deviceId: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], config: [{
                type: Input
            }], errorFilter: [{
                type: Input
            }], torch: [{
                type: Input
            }], valueChanges: [{
                type: Output
            }], started: [{
                type: Output
            }], barcodeScanner: [{
                type: ViewChild,
                args: ['BarcodeScanner']
            }] } });

class BarcodeScannerLivestreamModule {
}
BarcodeScannerLivestreamModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BarcodeScannerLivestreamModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamModule, declarations: [BarcodeScannerLivestreamComponent], imports: [CommonModule], exports: [BarcodeScannerLivestreamComponent] });
BarcodeScannerLivestreamModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        BarcodeScannerLivestreamComponent
                    ],
                    exports: [
                        BarcodeScannerLivestreamComponent
                    ]
                }]
        }] });

class BarcodeScannerLivestreamOverlayComponent {
    constructor() {
        this._started = false;
        this.width = '90vw';
        this.maxWidth = '640px';
        this.valueChanges = new EventEmitter();
        this.started = new EventEmitter();
        this._showScanner = false;
    }
    get isStarted() {
        return this._started;
    }
    get showScanner() {
        return this._showScanner;
    }
    ngOnDestroy() {
        this.scanner.stop();
    }
    show() {
        this._showScanner = true;
        this.scanner.start();
    }
    hide() {
        this._showScanner = false;
        this.scanner.stop();
    }
    onStarted(value) {
        this._started = value;
        this.started.next(value);
    }
    onValueChanges(result) {
        this.valueChanges.next(result);
    }
}
BarcodeScannerLivestreamOverlayComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamOverlayComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BarcodeScannerLivestreamOverlayComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.11", type: BarcodeScannerLivestreamOverlayComponent, selector: "barcode-scanner-livestream-overlay", inputs: { type: "type", deviceId: "deviceId", width: "width", maxWidth: "maxWidth", height: "height", maxHeight: "maxHeight", config: "config" }, outputs: { valueChanges: "valueChanges", started: "started" }, viewQueries: [{ propertyName: "scanner", first: true, predicate: BarcodeScannerLivestreamComponent, descendants: true }], ngImport: i0, template: "<div class=\"barcode-scanner-livestream-overlay\" [hidden]=\"!showScanner\">\n  <div\n    class=\"barcode-scanner-livestream-overlay-content\"\n    [style.width]=\"width\"\n    [style.max-width]=\"maxWidth\"\n    [style.height]=\"height\"\n    [style.max-height]=\"maxHeight\"\n  >\n    <div\n      class=\"barcode-scanner-livestream-overlay-close\"\n      *ngIf=\"isStarted\"\n      (click)=\"hide()\"\n    >\n      X\n    </div>\n    <barcode-scanner-livestream\n      [type]=\"type\"\n      [deviceId]=\"deviceId\"\n      [config]=\"config\"\n      (valueChanges)=\"onValueChanges($event)\"\n      (started)=\"onStarted($event)\"\n    ></barcode-scanner-livestream>\n  </div>\n</div>\n", styles: [".barcode-scanner-livestream-overlay{overflow:hidden;position:fixed;inset:0;width:100%;background-color:#0000004d;z-index:1000}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content{top:50%;position:absolute;left:50%;transform:translate(-50%,-50%)}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content .barcode-scanner-livestream-overlay-close{position:absolute;right:0;padding:.5rem;width:1.5rem;height:1.5rem;line-height:1.5rem;text-align:center;background-color:#fff;cursor:pointer;border:2px solid black;font-size:1.3rem;margin:-1rem;border-radius:2rem;z-index:100;box-sizing:content-box}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: BarcodeScannerLivestreamComponent, selector: "barcode-scanner-livestream", inputs: ["type", "deviceId", "maxWidth", "maxHeight", "config", "errorFilter", "torch"], outputs: ["valueChanges", "started"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamOverlayComponent, decorators: [{
            type: Component,
            args: [{ selector: 'barcode-scanner-livestream-overlay', template: "<div class=\"barcode-scanner-livestream-overlay\" [hidden]=\"!showScanner\">\n  <div\n    class=\"barcode-scanner-livestream-overlay-content\"\n    [style.width]=\"width\"\n    [style.max-width]=\"maxWidth\"\n    [style.height]=\"height\"\n    [style.max-height]=\"maxHeight\"\n  >\n    <div\n      class=\"barcode-scanner-livestream-overlay-close\"\n      *ngIf=\"isStarted\"\n      (click)=\"hide()\"\n    >\n      X\n    </div>\n    <barcode-scanner-livestream\n      [type]=\"type\"\n      [deviceId]=\"deviceId\"\n      [config]=\"config\"\n      (valueChanges)=\"onValueChanges($event)\"\n      (started)=\"onStarted($event)\"\n    ></barcode-scanner-livestream>\n  </div>\n</div>\n", styles: [".barcode-scanner-livestream-overlay{overflow:hidden;position:fixed;inset:0;width:100%;background-color:#0000004d;z-index:1000}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content{top:50%;position:absolute;left:50%;transform:translate(-50%,-50%)}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content .barcode-scanner-livestream-overlay-close{position:absolute;right:0;padding:.5rem;width:1.5rem;height:1.5rem;line-height:1.5rem;text-align:center;background-color:#fff;cursor:pointer;border:2px solid black;font-size:1.3rem;margin:-1rem;border-radius:2rem;z-index:100;box-sizing:content-box}\n"] }]
        }], propDecorators: { type: [{
                type: Input
            }], deviceId: [{
                type: Input
            }], width: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], height: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], config: [{
                type: Input
            }], valueChanges: [{
                type: Output
            }], started: [{
                type: Output
            }], scanner: [{
                type: ViewChild,
                args: [BarcodeScannerLivestreamComponent]
            }] } });

class BarcodeScannerLivestreamOverlayModule {
}
BarcodeScannerLivestreamOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamOverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BarcodeScannerLivestreamOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamOverlayModule, declarations: [BarcodeScannerLivestreamOverlayComponent], imports: [CommonModule,
        BarcodeScannerLivestreamModule], exports: [BarcodeScannerLivestreamOverlayComponent] });
BarcodeScannerLivestreamOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamOverlayModule, imports: [CommonModule,
        BarcodeScannerLivestreamModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.11", ngImport: i0, type: BarcodeScannerLivestreamOverlayModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BarcodeScannerLivestreamModule
                    ],
                    declarations: [
                        BarcodeScannerLivestreamOverlayComponent
                    ],
                    exports: [
                        BarcodeScannerLivestreamOverlayComponent
                    ]
                }]
        }] });

/*
 * Public API Surface of ngx-barcode-scanner
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BarcodeScannerLivestreamComponent, BarcodeScannerLivestreamModule, BarcodeScannerLivestreamOverlayComponent, BarcodeScannerLivestreamOverlayModule };
//# sourceMappingURL=ngx-barcode-scanner.mjs.map
