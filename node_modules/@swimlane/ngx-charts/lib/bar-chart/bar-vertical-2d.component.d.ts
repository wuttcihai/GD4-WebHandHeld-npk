import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
import { ColorHelper } from '../common/color.helper';
import { DataItem } from '../models/chart-data.model';
import { BaseChartComponent } from '../common/base-chart.component';
import { LegendOptions, LegendPosition } from '../common/types/legend.model';
import { ScaleType } from '../common/types/scale-type.enum';
import { ViewDimensions } from '../common/types/view-dimension.interface';
import { BarOrientation } from '../common/types/bar-orientation.enum';
import * as i0 from "@angular/core";
export declare class BarVertical2DComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: LegendPosition;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: boolean;
    showYAxisLabel: boolean;
    xAxisLabel: string;
    yAxisLabel: string;
    tooltipDisabled: boolean;
    scaleType: ScaleType;
    gradient: boolean;
    showGridLines: boolean;
    activeEntries: any[];
    schemeType: ScaleType;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    groupPadding: number;
    barPadding: number;
    roundDomains: boolean;
    roundEdges: boolean;
    yScaleMax: number;
    showDataLabel: boolean;
    dataLabelFormatting: any;
    noBarWhenZero: boolean;
    wrapTicks: boolean;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    groupDomain: string[];
    innerDomain: string[];
    valueDomain: [number, number];
    groupScale: any;
    innerScale: any;
    valueScale: any;
    transform: string;
    colors: ColorHelper;
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    legendOptions: LegendOptions;
    dataLabelMaxHeight: any;
    isSSR: boolean;
    barOrientation: typeof BarOrientation;
    ngOnInit(): void;
    update(): void;
    onDataLabelMaxHeightChanged(event: any, groupIndex: number): void;
    getGroupScale(): any;
    getInnerScale(): any;
    getValueScale(): any;
    getGroupDomain(): string[];
    getInnerDomain(): string[];
    getValueDomain(): [number, number];
    groupTransform(group: DataItem): string;
    onClick(data: any, group?: DataItem): void;
    trackBy: TrackByFunction<DataItem>;
    setColors(): void;
    getLegendOptions(): LegendOptions;
    updateYAxisWidth({ width }: {
        width: number;
    }): void;
    updateXAxisHeight({ height }: {
        height: number;
    }): void;
    onActivate(event: any, group: DataItem, fromLegend?: boolean): void;
    onDeactivate(event: any, group: DataItem, fromLegend?: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BarVertical2DComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BarVertical2DComponent, "ngx-charts-bar-vertical-2d", never, { "legend": { "alias": "legend"; "required": false; }; "legendTitle": { "alias": "legendTitle"; "required": false; }; "legendPosition": { "alias": "legendPosition"; "required": false; }; "xAxis": { "alias": "xAxis"; "required": false; }; "yAxis": { "alias": "yAxis"; "required": false; }; "showXAxisLabel": { "alias": "showXAxisLabel"; "required": false; }; "showYAxisLabel": { "alias": "showYAxisLabel"; "required": false; }; "xAxisLabel": { "alias": "xAxisLabel"; "required": false; }; "yAxisLabel": { "alias": "yAxisLabel"; "required": false; }; "tooltipDisabled": { "alias": "tooltipDisabled"; "required": false; }; "scaleType": { "alias": "scaleType"; "required": false; }; "gradient": { "alias": "gradient"; "required": false; }; "showGridLines": { "alias": "showGridLines"; "required": false; }; "activeEntries": { "alias": "activeEntries"; "required": false; }; "schemeType": { "alias": "schemeType"; "required": false; }; "trimXAxisTicks": { "alias": "trimXAxisTicks"; "required": false; }; "trimYAxisTicks": { "alias": "trimYAxisTicks"; "required": false; }; "rotateXAxisTicks": { "alias": "rotateXAxisTicks"; "required": false; }; "maxXAxisTickLength": { "alias": "maxXAxisTickLength"; "required": false; }; "maxYAxisTickLength": { "alias": "maxYAxisTickLength"; "required": false; }; "xAxisTickFormatting": { "alias": "xAxisTickFormatting"; "required": false; }; "yAxisTickFormatting": { "alias": "yAxisTickFormatting"; "required": false; }; "xAxisTicks": { "alias": "xAxisTicks"; "required": false; }; "yAxisTicks": { "alias": "yAxisTicks"; "required": false; }; "groupPadding": { "alias": "groupPadding"; "required": false; }; "barPadding": { "alias": "barPadding"; "required": false; }; "roundDomains": { "alias": "roundDomains"; "required": false; }; "roundEdges": { "alias": "roundEdges"; "required": false; }; "yScaleMax": { "alias": "yScaleMax"; "required": false; }; "showDataLabel": { "alias": "showDataLabel"; "required": false; }; "dataLabelFormatting": { "alias": "dataLabelFormatting"; "required": false; }; "noBarWhenZero": { "alias": "noBarWhenZero"; "required": false; }; "wrapTicks": { "alias": "wrapTicks"; "required": false; }; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never, false, never>;
}
