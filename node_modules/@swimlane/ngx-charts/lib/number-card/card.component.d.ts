import { EventEmitter, ElementRef, SimpleChanges, OnChanges, ChangeDetectorRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import { GridData } from '../common/grid-layout.helper';
import * as i0 from "@angular/core";
export declare class CardComponent implements OnChanges, OnDestroy, OnInit {
    private cd;
    private zone;
    private platformId;
    color: string;
    bandColor: string;
    textColor: string;
    x: number;
    y: number;
    width: number;
    height: number;
    label: string;
    data: GridData;
    medianSize: number;
    valueFormatting: any;
    labelFormatting: any;
    animations: boolean;
    select: EventEmitter<any>;
    textEl: ElementRef;
    element: HTMLElement;
    value: string;
    transform: string;
    formattedLabel: string;
    cardWidth: number;
    cardHeight: number;
    textWidth: number;
    textFontSize: number;
    textTransform: string;
    initialized: boolean;
    animationReq: number;
    bandHeight: number;
    transformBand: string;
    textPadding: number[];
    labelFontSize: number;
    bandPath: string;
    constructor(element: ElementRef, cd: ChangeDetectorRef, zone: NgZone, platformId: any);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    update(): void;
    paddedValue(value: string): string;
    startCount(): void;
    scaleText(): void;
    scaleTextSSR(): void;
    setPadding(): void;
    onClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CardComponent, "g[ngx-charts-card]", never, { "color": { "alias": "color"; "required": false; }; "bandColor": { "alias": "bandColor"; "required": false; }; "textColor": { "alias": "textColor"; "required": false; }; "x": { "alias": "x"; "required": false; }; "y": { "alias": "y"; "required": false; }; "width": { "alias": "width"; "required": false; }; "height": { "alias": "height"; "required": false; }; "label": { "alias": "label"; "required": false; }; "data": { "alias": "data"; "required": false; }; "medianSize": { "alias": "medianSize"; "required": false; }; "valueFormatting": { "alias": "valueFormatting"; "required": false; }; "labelFormatting": { "alias": "labelFormatting"; "required": false; }; "animations": { "alias": "animations"; "required": false; }; }, { "select": "select"; }, never, never, false, never>;
}
