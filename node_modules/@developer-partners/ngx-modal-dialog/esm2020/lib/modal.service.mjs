import { Injectable } from "@angular/core";
import { ModalReference } from "./modal-reference";
import { ModalComponent } from "./modal.component";
import * as i0 from "@angular/core";
export class ModalService {
    constructor(componentFactoryResolver, applicaionRef, injector) {
        this._componentFactoryResolver = componentFactoryResolver;
        this._applicaionRef = applicaionRef;
        this._injector = injector;
    }
    createModalComponent(dependecies) {
        let factory = this._componentFactoryResolver.resolveComponentFactory(ModalComponent);
        return factory.create(new ModalInjector(this._injector, dependecies));
    }
    createModalRefernce(map, config) {
        let modalReference = new InternalModalRef(config);
        // Create with internal implementation, but inject the public version.
        map.set(ModalReference, modalReference);
        modalReference.componentRef = this.createModalComponent(map);
        modalReference
            .result()
            .subscribe({
            complete: () => this.removeModal(modalReference)
        });
        return modalReference;
    }
    show(componentType, config) {
        let map = new WeakMap();
        let modalReference = this.createModalRefernce(map, config);
        modalReference.componentRef.instance.contentComponentType = componentType;
        this._applicaionRef.attachView(modalReference.componentRef.hostView);
        document.body.appendChild(modalReference.getHtmlElement());
        // To trigger the animation effect. The modal is added to document at this point, but it's invisible.
        // We animate the showing part.
        window.setTimeout(() => {
            modalReference.getHtmlElement().firstElementChild.classList.add('dp-visible');
        });
        modalReference.componentRef.changeDetectorRef.detectChanges();
        return modalReference;
    }
    removeModal(modalReference) {
        modalReference.getHtmlElement().firstElementChild.classList.remove('dp-visible');
        // Wait until the closing animation is done, then remove the component.
        window.setTimeout(() => {
            this._applicaionRef.detachView(modalReference.componentRef.hostView);
            modalReference.componentRef.destroy();
        }, 400);
    }
}
ModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.2", ngImport: i0, type: ModalService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
ModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.2", ngImport: i0, type: ModalService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.2", ngImport: i0, type: ModalService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }]; } });
class ModalInjector {
    constructor(injector, extraDependencies) {
        this._injector = injector;
        this._extraDependecnies = extraDependencies;
    }
    get(token, notFoundValue, flags) {
        let resolved = this._extraDependecnies.get(token);
        if (resolved) {
            return resolved;
        }
        return this._injector.get(token, notFoundValue, flags);
    }
}
class InternalModalRef extends ModalReference {
    constructor(config) {
        super(config);
    }
    getHtmlElement() {
        let viewRef = this.componentRef.hostView;
        return viewRef.rootNodes[0];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tb2RhbC1kaWFsb2cvc3JjL2xpYi9tb2RhbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXdKLE1BQU0sZUFBZSxDQUFDO0FBRWpNLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBS25ELE1BQU0sT0FBTyxZQUFZO0lBS3ZCLFlBQ0Usd0JBQWtELEVBQ2xELGFBQTZCLEVBQzdCLFFBQWtCO1FBRWxCLElBQUksQ0FBQyx5QkFBeUIsR0FBRyx3QkFBd0IsQ0FBQztRQUMxRCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRU8sb0JBQW9CLENBQUMsV0FBOEI7UUFDekQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXJGLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FDckMsSUFBSSxDQUFDLFNBQVMsRUFDZCxXQUFXLENBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLG1CQUFtQixDQUFtQixHQUFzQixFQUFFLE1BQTRCO1FBQ2hHLElBQUksY0FBYyxHQUFHLElBQUksZ0JBQWdCLENBQW1CLE1BQU0sQ0FBQyxDQUFDO1FBRXBFLHNFQUFzRTtRQUN0RSxHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUV4QyxjQUFjLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3RCxjQUFjO2FBQ1gsTUFBTSxFQUFFO2FBQ1IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO1NBQ2pELENBQUMsQ0FBQztRQUVMLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxJQUFJLENBQTZCLGFBQXdCLEVBQUUsTUFBNEI7UUFDNUYsSUFBSSxHQUFHLEdBQUcsSUFBSSxPQUFPLEVBQVksQ0FBQztRQUNsQyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQW1CLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU3RSxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsR0FBRyxhQUFhLENBQUM7UUFFMUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyRSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUUzRCxxR0FBcUc7UUFDckcsK0JBQStCO1FBQy9CLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ3JCLGNBQWMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2hGLENBQUMsQ0FBQyxDQUFDO1FBRUgsY0FBYyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU5RCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRU8sV0FBVyxDQUFtQixjQUFrRDtRQUN0RixjQUFjLENBQUMsY0FBYyxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVqRix1RUFBdUU7UUFDdkUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRSxjQUFjLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNWLENBQUM7O3lHQXJFVSxZQUFZOzZHQUFaLFlBQVksY0FGWCxNQUFNOzJGQUVQLFlBQVk7a0JBSHhCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COztBQXlFRCxNQUFNLGFBQWE7SUFJakIsWUFDRSxRQUFrQixFQUNsQixpQkFBb0M7UUFFcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO0lBQzlDLENBQUM7SUFJTSxHQUFHLENBQUMsS0FBVSxFQUFFLGFBQW1CLEVBQUUsS0FBVztRQUNyRCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWxELElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNGO0FBRUQsTUFBTSxnQkFBbUMsU0FBUSxjQUFnQztJQUcvRSxZQUFZLE1BQTRCO1FBQ3RDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRU0sY0FBYztRQUNuQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQTJDLENBQUM7UUFDNUUsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQXBwbGljYXRpb25SZWYsIEluamVjdG9yLCBUeXBlLCBDb21wb25lbnRSZWYsIEluamVjdGlvblRva2VuLCBBYnN0cmFjdFR5cGUsIEluamVjdEZsYWdzLCBFbWJlZGRlZFZpZXdSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBNb2RhbENvbmZpZyB9IGZyb20gXCIuL21vZGFsLWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBNb2RhbFJlZmVyZW5jZSB9IGZyb20gXCIuL21vZGFsLXJlZmVyZW5jZVwiO1xyXG5pbXBvcnQgeyBNb2RhbENvbXBvbmVudCB9IGZyb20gXCIuL21vZGFsLmNvbXBvbmVudFwiO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTW9kYWxTZXJ2aWNlIHtcclxuICBwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcclxuICBwcml2YXRlIF9hcHBsaWNhaW9uUmVmOiBBcHBsaWNhdGlvblJlZjtcclxuICBwcml2YXRlIF9pbmplY3RvcjogSW5qZWN0b3I7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBhcHBsaWNhaW9uUmVmOiBBcHBsaWNhdGlvblJlZixcclxuICAgIGluamVjdG9yOiBJbmplY3RvclxyXG4gICkge1xyXG4gICAgdGhpcy5fY29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xyXG4gICAgdGhpcy5fYXBwbGljYWlvblJlZiA9IGFwcGxpY2Fpb25SZWY7XHJcbiAgICB0aGlzLl9pbmplY3RvciA9IGluamVjdG9yO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVNb2RhbENvbXBvbmVudChkZXBlbmRlY2llczogV2Vha01hcDxhbnksIGFueT4pOiBDb21wb25lbnRSZWY8TW9kYWxDb21wb25lbnQ+IHtcclxuICAgIGxldCBmYWN0b3J5ID0gdGhpcy5fY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KE1vZGFsQ29tcG9uZW50KTtcclxuXHJcbiAgICByZXR1cm4gZmFjdG9yeS5jcmVhdGUobmV3IE1vZGFsSW5qZWN0b3IoXHJcbiAgICAgIHRoaXMuX2luamVjdG9yLFxyXG4gICAgICBkZXBlbmRlY2llc1xyXG4gICAgKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZU1vZGFsUmVmZXJuY2U8VENvbmZpZywgVFJlc3VsdD4obWFwOiBXZWFrTWFwPGFueSwgYW55PiwgY29uZmlnOiBNb2RhbENvbmZpZzxUQ29uZmlnPik6IEludGVybmFsTW9kYWxSZWY8VENvbmZpZywgVFJlc3VsdD4ge1xyXG4gICAgbGV0IG1vZGFsUmVmZXJlbmNlID0gbmV3IEludGVybmFsTW9kYWxSZWY8VENvbmZpZywgVFJlc3VsdD4oY29uZmlnKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgd2l0aCBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiwgYnV0IGluamVjdCB0aGUgcHVibGljIHZlcnNpb24uXHJcbiAgICBtYXAuc2V0KE1vZGFsUmVmZXJlbmNlLCBtb2RhbFJlZmVyZW5jZSk7XHJcblxyXG4gICAgbW9kYWxSZWZlcmVuY2UuY29tcG9uZW50UmVmID0gdGhpcy5jcmVhdGVNb2RhbENvbXBvbmVudChtYXApO1xyXG5cclxuICAgIG1vZGFsUmVmZXJlbmNlXHJcbiAgICAgIC5yZXN1bHQoKVxyXG4gICAgICAuc3Vic2NyaWJlKHtcclxuICAgICAgICBjb21wbGV0ZTogKCkgPT4gdGhpcy5yZW1vdmVNb2RhbChtb2RhbFJlZmVyZW5jZSlcclxuICAgICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG1vZGFsUmVmZXJlbmNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNob3c8VENvbmZpZywgVFJlc3VsdCA9IFRDb25maWc+KGNvbXBvbmVudFR5cGU6IFR5cGU8YW55PiwgY29uZmlnOiBNb2RhbENvbmZpZzxUQ29uZmlnPik6IE1vZGFsUmVmZXJlbmNlPFRDb25maWcsIFRSZXN1bHQ+IHtcclxuICAgIGxldCBtYXAgPSBuZXcgV2Vha01hcDxhbnksIGFueT4oKTtcclxuICAgIGxldCBtb2RhbFJlZmVyZW5jZSA9IHRoaXMuY3JlYXRlTW9kYWxSZWZlcm5jZTxUQ29uZmlnLCBUUmVzdWx0PihtYXAsIGNvbmZpZyk7XHJcblxyXG4gICAgbW9kYWxSZWZlcmVuY2UuY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbnRlbnRDb21wb25lbnRUeXBlID0gY29tcG9uZW50VHlwZTtcclxuXHJcbiAgICB0aGlzLl9hcHBsaWNhaW9uUmVmLmF0dGFjaFZpZXcobW9kYWxSZWZlcmVuY2UuY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobW9kYWxSZWZlcmVuY2UuZ2V0SHRtbEVsZW1lbnQoKSk7XHJcblxyXG4gICAgLy8gVG8gdHJpZ2dlciB0aGUgYW5pbWF0aW9uIGVmZmVjdC4gVGhlIG1vZGFsIGlzIGFkZGVkIHRvIGRvY3VtZW50IGF0IHRoaXMgcG9pbnQsIGJ1dCBpdCdzIGludmlzaWJsZS5cclxuICAgIC8vIFdlIGFuaW1hdGUgdGhlIHNob3dpbmcgcGFydC5cclxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgbW9kYWxSZWZlcmVuY2UuZ2V0SHRtbEVsZW1lbnQoKS5maXJzdEVsZW1lbnRDaGlsZC5jbGFzc0xpc3QuYWRkKCdkcC12aXNpYmxlJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBtb2RhbFJlZmVyZW5jZS5jb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG5cclxuICAgIHJldHVybiBtb2RhbFJlZmVyZW5jZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVtb3ZlTW9kYWw8VENvbmZpZywgVFJlc3VsdD4obW9kYWxSZWZlcmVuY2U6IEludGVybmFsTW9kYWxSZWY8VENvbmZpZywgVFJlc3VsdD4pOiB2b2lkIHtcclxuICAgIG1vZGFsUmVmZXJlbmNlLmdldEh0bWxFbGVtZW50KCkuZmlyc3RFbGVtZW50Q2hpbGQuY2xhc3NMaXN0LnJlbW92ZSgnZHAtdmlzaWJsZScpO1xyXG5cclxuICAgIC8vIFdhaXQgdW50aWwgdGhlIGNsb3NpbmcgYW5pbWF0aW9uIGlzIGRvbmUsIHRoZW4gcmVtb3ZlIHRoZSBjb21wb25lbnQuXHJcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2FwcGxpY2Fpb25SZWYuZGV0YWNoVmlldyhtb2RhbFJlZmVyZW5jZS5jb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG4gICAgICBtb2RhbFJlZmVyZW5jZS5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xyXG4gICAgfSwgNDAwKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIE1vZGFsSW5qZWN0b3IgaW1wbGVtZW50cyBJbmplY3RvciB7XHJcbiAgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yO1xyXG4gIHByaXZhdGUgX2V4dHJhRGVwZW5kZWNuaWVzOiBXZWFrTWFwPGFueSwgYW55PjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBleHRyYURlcGVuZGVuY2llczogV2Vha01hcDxhbnksIGFueT5cclxuICApIHtcclxuICAgIHRoaXMuX2luamVjdG9yID0gaW5qZWN0b3I7XHJcbiAgICB0aGlzLl9leHRyYURlcGVuZGVjbmllcyA9IGV4dHJhRGVwZW5kZW5jaWVzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldDxUPih0b2tlbjogVHlwZTxUPiB8IEluamVjdGlvblRva2VuPFQ+IHwgQWJzdHJhY3RUeXBlPFQ+LCBub3RGb3VuZFZhbHVlPzogVCwgZmxhZ3M/OiBJbmplY3RGbGFncyk6IFQ7XHJcbiAgcHVibGljIGdldCh0b2tlbjogYW55LCBub3RGb3VuZFZhbHVlPzogYW55KTtcclxuICBwdWJsaWMgZ2V0KHRva2VuOiBhbnksIG5vdEZvdW5kVmFsdWU/OiBhbnksIGZsYWdzPzogYW55KSB7XHJcbiAgICBsZXQgcmVzb2x2ZWQgPSB0aGlzLl9leHRyYURlcGVuZGVjbmllcy5nZXQodG9rZW4pO1xyXG5cclxuICAgIGlmIChyZXNvbHZlZCkge1xyXG4gICAgICByZXR1cm4gcmVzb2x2ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2luamVjdG9yLmdldCh0b2tlbiwgbm90Rm91bmRWYWx1ZSwgZmxhZ3MpO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgSW50ZXJuYWxNb2RhbFJlZjxUQ29uZmlnLCBUUmVzdWx0PiBleHRlbmRzIE1vZGFsUmVmZXJlbmNlPFRDb25maWcsIFRSZXN1bHQ+IHtcclxuICBwdWJsaWMgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8TW9kYWxDb21wb25lbnQ+O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb25maWc6IE1vZGFsQ29uZmlnPFRDb25maWc+KSB7XHJcbiAgICBzdXBlcihjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEh0bWxFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIGxldCB2aWV3UmVmID0gdGhpcy5jb21wb25lbnRSZWYuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmPE1vZGFsQ29tcG9uZW50PjtcclxuICAgIHJldHVybiB2aWV3UmVmLnJvb3ROb2Rlc1swXTtcclxuICB9XHJcbn0iXX0=